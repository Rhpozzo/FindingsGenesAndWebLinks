#BlueJ class context
comment0.target=Part1
comment0.text=\n\ \ Write\ the\ method\ findSimpleGene\ that\ has\ one\ String\ parameter\ dna,\ \n\ \ representing\ a\ string\ of\ DNA.\ This\ method\ does\ the\ following\:\n\ \ Finds\ the\ index\ position\ of\ the\ start\ codon\ \u201CATG\u201D.\ If\ there\ is\ no\ \u201CATG\u201D,\ \n\ \ return\ the\ empty\ string.\n\ \ Finds\ the\ index\ position\ of\ the\ first\ stop\ codon\ \u201CTAA\u201D\ appearing\ after\ the\ \n\ \ \u201CATG\u201D\ that\ was\ found.\ \ If\ there\ is\ no\ such\ \u201CTAA\u201D,\ return\ the\ empty\ string.\n\ \ If\ the\ length\ of\ the\ substring\ between\ the\ \u201CATG\u201D\ and\ \u201CTAA\u201D\ is\ a\ \n\ \ multiple\ of\ 3,\ then\ return\ the\ substring\ that\ starts\ with\ that\ \u201CATG\u201D\ \n\ \ and\ ends\ with\ that\ \u201CTAA\u201D.\n\ \ \n\ \ 4.\ Write\ the\ void\ method\ testSimpleGene\ that\ has\ no\ parameters.\ \n\ \ You\ should\ create\ five\ DNA\ strings.\ \n\ \ The\ strings\ should\ have\ specific\ test\ cases,\ \n\ \ such\ as\:\ DNA\ with\ no\ \u201CATG\u201D,\ DNA\ with\ no\ \u201CTAA\u201D,\ \n\ \ DNA\ with\ no\ \u201CATG\u201D\ or\ \u201CTAA\u201D,\ DNA\ with\ ATG,\ TAA\ and\ the\ substring\ \n\ \ between\ them\ is\ a\ multiple\ of\ 3\ (a\ gene),\ and\ DNA\ with\ ATG,\ TAA\ \n\ \ and\ the\ substring\ between\ them\ is\ not\ a\ multiple\ of\ 3.\ \n\ \ For\ each\ DNA\ string\ you\ should\:\n\ \ \ \ \ \ Print\ the\ DNA\ string.\n\ \ \ \ \ \ See\ if\ there\ is\ a\ gene\ by\ calling\ findSimpleGene\ with\ this\ string\ as\ the\ parameter.\ \n\ \ \ \ \ \ If\ a\ gene\ exists\ following\ our\ algorithm\ above,\ then\ print\ the\ gene,\ otherwise\ print\ the\ empty\ string.\n
comment1.params=dna
comment1.target=java.lang.String\ findSimpleGene(java.lang.String)
comment2.params=
comment2.target=void\ testSimpeGene()
numComments=3
